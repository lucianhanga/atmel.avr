;--------10--------20--------30--------40--------50--------60--------70--------80--------90------100
;
;    This example is part of the example group which shows how SPI communication is conducted
;    between two SPI enabled devices. In this case both Master and Slave are AtMega328p MCUs:
;  
;    SPIMasterExample - the code which should run on the Master MCU. It sends every 5 seconds
;                       a message to the Slave MCU to light up its LED.
;
;    SPISlaveExample -  the code which is supposed to run on the Slave MCU. It waits for the 
;                       master to send a message. Once the message it is identified as coorect
;                       it will light up a LED.
;
;    PINs used by the SPI module of the ATMega328p are:
;    
;    SCK - the clock which is always generated by the master
;    MISO - Master In, Slave Out - the wire on which the slave sends the data to the masdter
;    MOSI - Master Out, Slave In - the wire on which the master sends the data to the slave
;    SS - Slave Select - the master (can) use this pin to enable the Slave which which it
;         wants to communicate. When in MasterSPI mode and if SS is set an input you get in some
;         trouble - so make sure that you read Atmega48PA/88PA/168PA/328P page 171-173.
;    
;    Terminology:
;
;    SPCR - SPI Control Register
;       SPIE - (bitmask) - SPI Interrupt Enable
;       SPE  - (bitmask) - SPI Enable - this should be set to enable any SPI operations
;       DORD - (bitmask) - Data Order - 1:LSB; 0:MSB
;       MSTR - (bitmask) - Master/Slave Select - 1:Master SPI; 0:Slave SPI
;       CPOL - (bitmask) - Clock Polarity - 1:IDLE on High; 0:IDLE on Low
;       CPAH - (bitmask) - Clock Phase - determines when the data is sampled/setup 
;       SPR1..0 - (bitmask) - SPI Clock Rate Select
;            SPR2X SPR1 SPR0       SCK Freq
;              0     0    0          Fosc/4   (Fosc - Oscilator Clock Frequency)  
;              0     0    1          Fosc/16
;              0     1    0          Fosc/64
;              0     1    1          Fosc/128
;              1     0    0          Fosc/2 
;              1     0    1          Fosc/8
;              1     1    0          Fosc/32
;              1     1    1          Fosc/6
;    SPSR - SPI Status Register
;       SPIF - (bitmask) - SPI Interrupt Flag - its set when a serial transfer is complete.
;       WCOL - Write COLision Flag - is set if SPDR is written during data transfer
;       SPI2X - used together with SPR1..0 to setup the SCK freq.
;    SPDR - SPI Data Register 
;
; atmega328p pinout
;                                      _______  _______
;                  Reset-PCINT14-PC6 -| 1            28|- PC5-PCINT13-ADC5-A5|A5-SCL
;                 0--RXD-PCINT16-PD0 -| 2            27|- PC4-PCINT12-ADC4-A4|A5-SDA 
;                 1--TXD-PCINT17-PD1 -| 3            26|- PC3-PCINT11-ADC3-A3|A5
;                 2-INT0-PCINT18-PD2 -| 4            25|- PC2-PCINT10-ADC2-A2|A5
;        OC2B-PWM-3-INT1-PCINT19-PD3 -| 5            24|- PC1-PCINT9--ADC1-A1|A5
;             T0--4-XCK--PCINT20-PD4 -| 6            23|- PC0-PCINT8--ADC0-A0|A5
;                                VCC -| 7            22|- GND
;                                GND -| 8            21|- AREF
;             OSC1-XTAL1-PCINT6--PB6 -| 9            20|- VCC
;             OSC2-XTAL2-PCINT7--PB7 -|10            19|- PB5-PCINT5------13-----SCK   --->
;        OC0B-PWM-5--T1--PCINT21-PD5 -|11            18|- PB4-PCINT4------12-----MISO  <---
;        OC0A-PWM-6-AIN0-PCINT22-PD6 -|12            17|- PB3-PCINT3-OC2A-11-PWM-MOSI  --->
;                 7-AIN1-PCINT23-PD7 -|13            16|- PB2-PCINT2-OC1B-10-PWM-SS    --->
;            ICP1-8-CLK0-PCINT0--PB0 -|14            15|- PB1-PCINT1-OC1A--9-PWM
;                                     ------------------
;
;
                .include        "stack.inc"
                .dseg

                .cseg
                .org    0               jmp     start


                .org            INT_VECTORS_SIZE        ; end of the interrupt vectors table
start:          initStk                                 ; initialize the stack at the end of SRAM

init:           ; prepare the SPI Master mode
                cli                                     ; disable the interrupts until ready
                sbi             DDRB, DDB2              ; setup PB2 (SS) as output
                sbi             DDRB, DDB3              ; setup PB3 (MOSI) as output
                sbi             DDRB, DDB5              ; setup PB5 (SCK) as output
                cbi             DDRB, DDB4              ; setup PB4 (MISO) as input
                ; all this could be done also with the following sequence,
                ; but for clarity is used the not optimised version from above
                ; ldi             r20, (1 << DDB2) | (1 << DDB3) | (1 << DDB5)
                ; out             DDRB, r20
                sbi             PORTB, PORTB2           ; unselect the SPI Slave for now
                ; emable the SPI, master mode, SCK <-- Fosc/16
                ldi             r20, (1<<SPE)|(1<<MSTR)|(1<<SPR0)
                out             SPCR, r20               ; setup SPI Control Register
               
                ldi             r16, 'A'                ; prepare to write character A to Slave
transmit:       ; transmit the value from r20
                out             SPDR, r16
wait_transmit:  ; pool for the transmit completed status
                in              r20, SPSR               ; get the contest of SPI Status Register
                sbrs            r20, SPIF               ; skip instruction if bitSPIF set
                rjmp            wait_transmit
wait_completed: 


end:            rjmp            end

        